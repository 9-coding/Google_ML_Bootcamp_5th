{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":63056,"databundleVersionId":9094797,"sourceType":"competition"},{"sourceId":186147615,"sourceType":"kernelVersion"},{"sourceId":192926522,"sourceType":"kernelVersion"},{"sourceId":3729,"sourceType":"modelInstanceVersion","modelInstanceId":2656,"modelId":312}],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"- [Training notebook](https://www.kaggle.com/code/motono0223/isic-pytorch-training-baseline-image-only)\n- Inference notebook (This notebook)","metadata":{}},{"cell_type":"markdown","source":"# <span><h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Import Required Libraries üìö</h1></span>","metadata":{}},{"cell_type":"code","source":"import os\nimport gc\nimport cv2\nimport math\nimport copy\nimport time\nimport random\nimport glob\nfrom matplotlib import pyplot as plt\n\nimport h5py\nfrom PIL import Image\nfrom io import BytesIO\n\n# For data manipulation\nimport numpy as np\nimport pandas as pd\n\n# Pytorch Imports\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nfrom torch.optim import lr_scheduler\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.cuda import amp\nimport torchvision\n\n# Utils\nimport joblib\nfrom tqdm import tqdm\nfrom collections import defaultdict\n\n# Sklearn Imports\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold\n\n# For Image Models\nimport timm\n\n# Albumentations for augmentations\nimport albumentations as A\nfrom albumentations.pytorch import ToTensorV2\n\n# For colored terminal text\nfrom colorama import Fore, Back, Style\nb_ = Fore.BLUE\nsr_ = Style.RESET_ALL\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# For descriptive error messages\nos.environ['CUDA_LAUNCH_BLOCKING'] = \"1\"","metadata":{"execution":{"iopub.status.busy":"2024-08-17T05:42:05.102052Z","iopub.execute_input":"2024-08-17T05:42:05.102361Z","iopub.status.idle":"2024-08-17T05:42:13.637340Z","shell.execute_reply.started":"2024-08-17T05:42:05.102335Z","shell.execute_reply":"2024-08-17T05:42:13.636532Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"# <span><h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Training Configuration ‚öôÔ∏è</h1></span>","metadata":{}},{"cell_type":"code","source":"CONFIG = {\n    \"seed\": 42,\n    \"img_size\": 384,\n    \"model_name\": \"tf_efficientnet_b0_ns\",\n    \"valid_batch_size\": 32,\n    \"device\": torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\"),\n}","metadata":{"execution":{"iopub.status.busy":"2024-08-17T05:42:13.638862Z","iopub.execute_input":"2024-08-17T05:42:13.639340Z","iopub.status.idle":"2024-08-17T05:42:13.678293Z","shell.execute_reply.started":"2024-08-17T05:42:13.639313Z","shell.execute_reply":"2024-08-17T05:42:13.677302Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"# <span><h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Set Seed for Reproducibility</h1></span>","metadata":{}},{"cell_type":"code","source":"def set_seed(seed=42):\n    '''Sets the seed of the entire notebook so results are the same every time we run.\n    This is for REPRODUCIBILITY.'''\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    # When running on the CuDNN backend, two further options must be set\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n    # Set a fixed value for the hash seed\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    \nset_seed(CONFIG['seed'])","metadata":{"execution":{"iopub.status.busy":"2024-08-17T05:42:13.679611Z","iopub.execute_input":"2024-08-17T05:42:13.679890Z","iopub.status.idle":"2024-08-17T05:42:13.692359Z","shell.execute_reply.started":"2024-08-17T05:42:13.679866Z","shell.execute_reply":"2024-08-17T05:42:13.691471Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"ROOT_DIR = \"/kaggle/input/isic-2024-challenge\"\nTEST_CSV = f'{ROOT_DIR}/test-metadata.csv'\nTEST_HDF = f'{ROOT_DIR}/test-image.hdf5'\nSAMPLE = f'{ROOT_DIR}/sample_submission.csv'\n\nBEST_WEIGHT = \"/kaggle/input/sample-training/AUROC0.9403_Loss0.5024_epoch9.bin\"","metadata":{"execution":{"iopub.status.busy":"2024-08-17T05:42:13.694360Z","iopub.execute_input":"2024-08-17T05:42:13.694694Z","iopub.status.idle":"2024-08-17T05:42:13.699243Z","shell.execute_reply.started":"2024-08-17T05:42:13.694667Z","shell.execute_reply":"2024-08-17T05:42:13.698458Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":"# <h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Read the Data üìñ</h1>","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv(TEST_CSV)\ndf['target'] = 0 # dummy\ndf","metadata":{"execution":{"iopub.status.busy":"2024-08-17T05:42:13.700125Z","iopub.execute_input":"2024-08-17T05:42:13.700368Z","iopub.status.idle":"2024-08-17T05:42:13.753878Z","shell.execute_reply.started":"2024-08-17T05:42:13.700347Z","shell.execute_reply":"2024-08-17T05:42:13.753058Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"        isic_id  patient_id  age_approx     sex anatom_site_general  \\\n0  ISIC_0015657  IP_6074337        45.0    male     posterior torso   \n1  ISIC_0015729  IP_1664139        35.0  female     lower extremity   \n2  ISIC_0015740  IP_7142616        65.0    male     posterior torso   \n\n   clin_size_long_diam_mm          image_type tbp_tile_type  tbp_lv_A  \\\n0                    2.70  TBP tile: close-up        3D: XP  22.80433   \n1                    2.52  TBP tile: close-up        3D: XP  16.64867   \n2                    3.16  TBP tile: close-up        3D: XP  24.25384   \n\n   tbp_lv_Aext  ...  tbp_lv_stdL  tbp_lv_stdLExt  tbp_lv_symm_2axis  \\\n0    20.007270  ...     1.281532        2.299935           0.479339   \n1     9.657964  ...     1.271940        2.011223           0.426230   \n2    19.937380  ...     1.080308        2.705857           0.366071   \n\n   tbp_lv_symm_2axis_angle   tbp_lv_x     tbp_lv_y    tbp_lv_z  \\\n0                       20 -155.06510  1511.222000  113.980100   \n1                       25 -112.36924   629.535889  -15.019287   \n2                      110  -84.29282  1303.978000  -28.576050   \n\n                                         attribution  copyright_license  \\\n0             Memorial Sloan Kettering Cancer Center              CC-BY   \n1  Frazer Institute, The University of Queensland...              CC-BY   \n2                                        FNQH Cairns              CC-BY   \n\n   target  \n0       0  \n1       0  \n2       0  \n\n[3 rows x 45 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>isic_id</th>\n      <th>patient_id</th>\n      <th>age_approx</th>\n      <th>sex</th>\n      <th>anatom_site_general</th>\n      <th>clin_size_long_diam_mm</th>\n      <th>image_type</th>\n      <th>tbp_tile_type</th>\n      <th>tbp_lv_A</th>\n      <th>tbp_lv_Aext</th>\n      <th>...</th>\n      <th>tbp_lv_stdL</th>\n      <th>tbp_lv_stdLExt</th>\n      <th>tbp_lv_symm_2axis</th>\n      <th>tbp_lv_symm_2axis_angle</th>\n      <th>tbp_lv_x</th>\n      <th>tbp_lv_y</th>\n      <th>tbp_lv_z</th>\n      <th>attribution</th>\n      <th>copyright_license</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ISIC_0015657</td>\n      <td>IP_6074337</td>\n      <td>45.0</td>\n      <td>male</td>\n      <td>posterior torso</td>\n      <td>2.70</td>\n      <td>TBP tile: close-up</td>\n      <td>3D: XP</td>\n      <td>22.80433</td>\n      <td>20.007270</td>\n      <td>...</td>\n      <td>1.281532</td>\n      <td>2.299935</td>\n      <td>0.479339</td>\n      <td>20</td>\n      <td>-155.06510</td>\n      <td>1511.222000</td>\n      <td>113.980100</td>\n      <td>Memorial Sloan Kettering Cancer Center</td>\n      <td>CC-BY</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ISIC_0015729</td>\n      <td>IP_1664139</td>\n      <td>35.0</td>\n      <td>female</td>\n      <td>lower extremity</td>\n      <td>2.52</td>\n      <td>TBP tile: close-up</td>\n      <td>3D: XP</td>\n      <td>16.64867</td>\n      <td>9.657964</td>\n      <td>...</td>\n      <td>1.271940</td>\n      <td>2.011223</td>\n      <td>0.426230</td>\n      <td>25</td>\n      <td>-112.36924</td>\n      <td>629.535889</td>\n      <td>-15.019287</td>\n      <td>Frazer Institute, The University of Queensland...</td>\n      <td>CC-BY</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ISIC_0015740</td>\n      <td>IP_7142616</td>\n      <td>65.0</td>\n      <td>male</td>\n      <td>posterior torso</td>\n      <td>3.16</td>\n      <td>TBP tile: close-up</td>\n      <td>3D: XP</td>\n      <td>24.25384</td>\n      <td>19.937380</td>\n      <td>...</td>\n      <td>1.080308</td>\n      <td>2.705857</td>\n      <td>0.366071</td>\n      <td>110</td>\n      <td>-84.29282</td>\n      <td>1303.978000</td>\n      <td>-28.576050</td>\n      <td>FNQH Cairns</td>\n      <td>CC-BY</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows √ó 45 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_sub = pd.read_csv(SAMPLE)\ndf_sub","metadata":{"execution":{"iopub.status.busy":"2024-08-17T05:42:13.754912Z","iopub.execute_input":"2024-08-17T05:42:13.755148Z","iopub.status.idle":"2024-08-17T05:42:13.766770Z","shell.execute_reply.started":"2024-08-17T05:42:13.755128Z","shell.execute_reply":"2024-08-17T05:42:13.765927Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"        isic_id  target\n0  ISIC_0015657     0.3\n1  ISIC_0015729     0.3\n2  ISIC_0015740     0.3","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>isic_id</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ISIC_0015657</td>\n      <td>0.3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ISIC_0015729</td>\n      <td>0.3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ISIC_0015740</td>\n      <td>0.3</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# <span><h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Dataset Class</h1></span>","metadata":{}},{"cell_type":"code","source":"class ISICDataset(Dataset):\n    def __init__(self, df, file_hdf, transforms=None):\n        self.df = df\n        self.fp_hdf = h5py.File(file_hdf, mode=\"r\")\n        self.isic_ids = df['isic_id'].values\n        self.targets = df['target'].values\n        self.transforms = transforms\n        \n    def __len__(self):\n        return len(self.isic_ids)\n    \n    def __getitem__(self, index):\n        isic_id = self.isic_ids[index]\n        img = np.array( Image.open(BytesIO(self.fp_hdf[isic_id][()])) )\n        target = self.targets[index]\n        \n        if self.transforms:\n            img = self.transforms(image=img)[\"image\"]\n            \n        return {\n            'image': img,\n            'target': target,\n        }","metadata":{"execution":{"iopub.status.busy":"2024-08-17T05:42:13.767955Z","iopub.execute_input":"2024-08-17T05:42:13.768293Z","iopub.status.idle":"2024-08-17T05:42:13.775872Z","shell.execute_reply.started":"2024-08-17T05:42:13.768256Z","shell.execute_reply":"2024-08-17T05:42:13.775002Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":"# <span><h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Augmentations</h1></span>","metadata":{}},{"cell_type":"code","source":"data_transforms = {\n    \"valid\": A.Compose([\n        A.Resize(CONFIG['img_size'], CONFIG['img_size']),\n        A.Normalize(\n                mean=[0.485, 0.456, 0.406], \n                std=[0.229, 0.224, 0.225], \n                max_pixel_value=255.0, \n                p=1.0\n            ),\n        ToTensorV2()], p=1.)\n}","metadata":{"execution":{"iopub.status.busy":"2024-08-17T05:42:13.777026Z","iopub.execute_input":"2024-08-17T05:42:13.777591Z","iopub.status.idle":"2024-08-17T05:42:13.785710Z","shell.execute_reply.started":"2024-08-17T05:42:13.777559Z","shell.execute_reply":"2024-08-17T05:42:13.784829Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":"# <span><h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">GeM Pooling</h1></span>","metadata":{}},{"cell_type":"code","source":"class GeM(nn.Module):\n    def __init__(self, p=3, eps=1e-6):\n        super(GeM, self).__init__()\n        self.p = nn.Parameter(torch.ones(1)*p)\n        self.eps = eps\n\n    def forward(self, x):\n        return self.gem(x, p=self.p, eps=self.eps)\n        \n    def gem(self, x, p=3, eps=1e-6):\n        return F.avg_pool2d(x.clamp(min=eps).pow(p), (x.size(-2), x.size(-1))).pow(1./p)\n        \n    def __repr__(self):\n        return self.__class__.__name__ + \\\n                '(' + 'p=' + '{:.4f}'.format(self.p.data.tolist()[0]) + \\\n                ', ' + 'eps=' + str(self.eps) + ')'","metadata":{"execution":{"iopub.status.busy":"2024-08-17T05:42:13.786773Z","iopub.execute_input":"2024-08-17T05:42:13.787048Z","iopub.status.idle":"2024-08-17T05:42:13.795406Z","shell.execute_reply.started":"2024-08-17T05:42:13.787026Z","shell.execute_reply":"2024-08-17T05:42:13.794646Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":"# <span><h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Create Model</h1></span>","metadata":{}},{"cell_type":"code","source":"class ISICModel(nn.Module):\n    def __init__(self, model_name, num_classes=1, pretrained=True, checkpoint_path=None):\n        super(ISICModel, self).__init__()\n        self.model = timm.create_model(model_name, pretrained=pretrained, checkpoint_path=checkpoint_path)\n\n        in_features = self.model.classifier.in_features\n        self.model.classifier = nn.Identity()\n        self.model.global_pool = nn.Identity()\n        self.pooling = GeM()\n        self.linear = nn.Linear(in_features, num_classes)\n        self.sigmoid = nn.Sigmoid()\n\n    def forward(self, images):\n        features = self.model(images)\n        pooled_features = self.pooling(features).flatten(1)\n        output = self.sigmoid(self.linear(pooled_features))\n        return output\n    \nmodel = ISICModel(CONFIG['model_name'], pretrained=False)\nmodel.load_state_dict( torch.load(BEST_WEIGHT) )\nmodel.to(CONFIG['device']);","metadata":{"execution":{"iopub.status.busy":"2024-08-17T05:42:13.798499Z","iopub.execute_input":"2024-08-17T05:42:13.798824Z","iopub.status.idle":"2024-08-17T05:42:14.546096Z","shell.execute_reply.started":"2024-08-17T05:42:13.798803Z","shell.execute_reply":"2024-08-17T05:42:14.545322Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":"<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.5em; font-weight: 300;\">Prepare Dataloaders</span>","metadata":{}},{"cell_type":"code","source":"test_dataset = ISICDataset(df, TEST_HDF, transforms=data_transforms[\"valid\"])\ntest_loader = DataLoader(test_dataset, batch_size=CONFIG['valid_batch_size'], \n                          num_workers=2, shuffle=False, pin_memory=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-17T05:42:14.547130Z","iopub.execute_input":"2024-08-17T05:42:14.547417Z","iopub.status.idle":"2024-08-17T05:42:14.557335Z","shell.execute_reply.started":"2024-08-17T05:42:14.547392Z","shell.execute_reply":"2024-08-17T05:42:14.556491Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":"<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.5em; font-weight: 300;\">Start Inference</span>","metadata":{}},{"cell_type":"code","source":"preds = []\nwith torch.no_grad():\n    bar = tqdm(enumerate(test_loader), total=len(test_loader))\n    for step, data in bar:        \n        images = data['image'].to(CONFIG[\"device\"], dtype=torch.float)        \n        batch_size = images.size(0)\n        outputs = model(images)\n        preds.append( outputs.detach().cpu().numpy() )\npreds = np.concatenate(preds).flatten()","metadata":{"execution":{"iopub.status.busy":"2024-08-17T05:42:14.558612Z","iopub.execute_input":"2024-08-17T05:42:14.559007Z","iopub.status.idle":"2024-08-17T05:42:15.533440Z","shell.execute_reply.started":"2024-08-17T05:42:14.558978Z","shell.execute_reply":"2024-08-17T05:42:15.532496Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stderr","text":"100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 1/1 [00:00<00:00,  1.09it/s]\n","output_type":"stream"}]},{"cell_type":"code","source":"df_sub[\"target\"] = preds\ndf_sub.to_csv(\"submission.csv\", index=False)","metadata":{"execution":{"iopub.status.busy":"2024-08-17T05:42:15.534856Z","iopub.execute_input":"2024-08-17T05:42:15.535150Z","iopub.status.idle":"2024-08-17T05:42:15.544525Z","shell.execute_reply.started":"2024-08-17T05:42:15.535121Z","shell.execute_reply":"2024-08-17T05:42:15.543557Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"df_sub","metadata":{"execution":{"iopub.status.busy":"2024-08-17T05:42:15.545582Z","iopub.execute_input":"2024-08-17T05:42:15.545837Z","iopub.status.idle":"2024-08-17T05:42:15.555726Z","shell.execute_reply.started":"2024-08-17T05:42:15.545815Z","shell.execute_reply":"2024-08-17T05:42:15.554817Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"        isic_id    target\n0  ISIC_0015657  0.998521\n1  ISIC_0015729  0.058162\n2  ISIC_0015740  0.201785","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>isic_id</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ISIC_0015657</td>\n      <td>0.998521</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ISIC_0015729</td>\n      <td>0.058162</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ISIC_0015740</td>\n      <td>0.201785</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]}]}